version: '3.8'

x-common-env: &common-env
  NODE_ENV: development
  LOG_LEVEL: debug
  DEBUG: 'gateway:*,http-proxy-middleware'
  NODE_OPTIONS: '--inspect=0.0.0.0:9229'

services:
  # Gateway Service
  gateway:
    build:
      context: .
      target: development
      args:
        NODE_ENV: development
    container_name: gateway-service-dev
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8080}:8080"
      - "9229:9229"  # Node.js debug port
    environment:
      <<: *common-env
      PORT: 8080
      APP_URL: http://localhost:${APP_PORT:-8080}
      CORS_ORIGIN: http://localhost:3000,http://localhost:8080
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM:-master}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-gateway-service}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-change-me}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PROMETHEUS_ENABLED: "true"
      PROMETHEUS_PORT: 9090
      JAEGER_ENABLED: "true"
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - logs:/usr/src/app/logs
    depends_on:
      - redis
      - postgres
      - keycloak
      - jaeger
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak-dev
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER:-keycloak}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-keycloak}
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: "true"
      KC_PROXY: edge
      KC_HTTP_PORT: 8080
    volumes:
      - keycloak_data:/opt/keycloak/data
    ports:
      - "${KEYCLOAK_PORT:-8085}:8080"
    depends_on:
      - postgres
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/realms/master"]
      interval: 10s
      timeout: 5s
      retries: 10

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${POSTGRES_USER:-keycloak}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-keycloak}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-keycloak}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.40
    container_name: jaeger-dev
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
      - "14268:14268"  # HTTP collector
      - "9411:9411"    # Zipkin
    networks:
      - gateway-network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - gateway
    networks:
      - gateway-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - gateway-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-dev
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - gateway-network

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter-dev
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - gateway-network

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-dev
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      - "8088:8080"
    networks:
      - gateway-network

  # Portainer for Container Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer-dev
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - gateway-network

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - gateway-network

  # LocalStack for AWS Services
  localstack:
    image: localstack/localstack:1.4.0
    container_name: localstack-dev
    restart: unless-stopped
    ports:
      - "4566:4566"  # All services
      - "4571:4571"  # CloudFormation
      - "4584:4584"  # CloudWatch Logs
      - "4593:4593"  # CloudWatch
      - "8081:8080"  # Web UI
    environment:
      - SERVICES=s3,sqs,sns,ses,secretsmanager,ssm,cloudwatch,cloudwatch-logs,cloudformation,iam,sts
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST_TMP_FOLDER=${TMPDIR:-/tmp/}localstack
    volumes:
      - "${TMPDIR:-/tmp/}localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - gateway-network

networks:
  gateway-network:
    driver: bridge

volumes:
  postgres_data:
  keycloak_data:
  redis_data:
  prometheus_data:
  grafana_data:
  portainer_data:
  logs:
